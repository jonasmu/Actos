<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Agresores" xml:space="preserve">
    <value>Agresores</value>
  </data>
  <data name="AgresorNoExiste" xml:space="preserve">
    <value>El agresor no existe.</value>
  </data>
  <data name="AgresorNoValido" xml:space="preserve">
    <value>El agresor no es válido.</value>
  </data>
  <data name="AgresorSinNombreApellidoApodo" xml:space="preserve">
    <value>El agresor debe tener nombre y/o apellido y/o apodo.</value>
  </data>
  <data name="AgresorYaEliminado" xml:space="preserve">
    <value>El agresor ya se encuentra eliminado.</value>
  </data>
  <data name="AntecedenteNoExiste" xml:space="preserve">
    <value>El antecedente no existe.</value>
  </data>
  <data name="AntecedenteNoValido" xml:space="preserve">
    <value>El antecedente no es válido.</value>
  </data>
  <data name="AntecedenteYaEliminado" xml:space="preserve">
    <value>El antecedente ya se encuentra eliminado.</value>
  </data>
  <data name="ApellidoNoValido" xml:space="preserve">
    <value>El apellido no es válido.</value>
  </data>
  <data name="ApodoNoValido" xml:space="preserve">
    <value>El apodo no es válido.</value>
  </data>
  <data name="CaracteristicasNoValidas" xml:space="preserve">
    <value>Las caracteristicas no son válidas.</value>
  </data>
  <data name="ClaveNoValida" xml:space="preserve">
    <value>La clave no es válida.</value>
  </data>
  <data name="CodigoAreaNoNumerico" xml:space="preserve">
    <value>El código de área debe ser numérico.</value>
  </data>
  <data name="CodigoAreaNoValido" xml:space="preserve">
    <value>El código de área no es válido.</value>
  </data>
  <data name="CoordenadasNoValidas" xml:space="preserve">
    <value>Las coordenadas de ubicación no son válidas.</value>
  </data>
  <data name="EstadoNoValido" xml:space="preserve">
    <value>El estado no es válido.</value>
  </data>
  <data name="FechaNoValida" xml:space="preserve">
    <value>La fecha no es válida.</value>
  </data>
  <data name="LocalidadNoExiste" xml:space="preserve">
    <value>La localidad no existe.</value>
  </data>
  <data name="LocalidadNoValida" xml:space="preserve">
    <value>La localidad no es válida.</value>
  </data>
  <data name="LocalidadReemplazoNoExiste" xml:space="preserve">
    <value>La localidad de reemplazo no existe.</value>
  </data>
  <data name="LocalidadReemplazoNoValida" xml:space="preserve">
    <value>La localidad de reemplazo no es válida.</value>
  </data>
  <data name="MetodosNoValidos" xml:space="preserve">
    <value>Los métodos no son válidos.</value>
  </data>
  <data name="NombreNoValido" xml:space="preserve">
    <value>El nombre no es válido.</value>
  </data>
  <data name="OcupacionNoValida" xml:space="preserve">
    <value>La ocupación no es válida.</value>
  </data>
  <data name="PerjuiciosNoValidos" xml:space="preserve">
    <value>Los perjuicios no son válidos.</value>
  </data>
  <data name="UbicacionNoValida" xml:space="preserve">
    <value>La ubicación no es válida.</value>
  </data>
  <data name="VictimaCargada" xml:space="preserve">
    <value>La víctima se creó con éxito.</value>
  </data>
  <data name="VictimaNoExiste" xml:space="preserve">
    <value>La víctima no existe.</value>
  </data>
  <data name="VictimaNoValida" xml:space="preserve">
    <value>La víctima no es válida.</value>
  </data>
  <data name="Victimas" xml:space="preserve">
    <value>Víctimas</value>
  </data>
  <data name="VictimaYaEliminada" xml:space="preserve">
    <value>La víctima ya se encuentra eliminada.</value>
  </data>
  <data name="Actos" xml:space="preserve">
    <value>Actos</value>
  </data>
  <data name="Antecedentes" xml:space="preserve">
    <value>Antecedentes</value>
  </data>
  <data name="Filtros" xml:space="preserve">
    <value>Filtros</value>
  </data>
  <data name="NuevoAgresor" xml:space="preserve">
    <value>Nuevo agresor</value>
  </data>
  <data name="Puntajes" xml:space="preserve">
    <value>Puntajes</value>
  </data>
  <data name="Altos" xml:space="preserve">
    <value>Altos</value>
  </data>
  <data name="Bajos" xml:space="preserve">
    <value>Bajos</value>
  </data>
  <data name="Medios" xml:space="preserve">
    <value>Medios</value>
  </data>
  <data name="PorApellido" xml:space="preserve">
    <value>Por apellido</value>
  </data>
  <data name="PorApodo" xml:space="preserve">
    <value>Por apodo</value>
  </data>
  <data name="PorNombre" xml:space="preserve">
    <value>Por nombre</value>
  </data>
  <data name="PorOcupacion" xml:space="preserve">
    <value>Por ocupación</value>
  </data>
  <data name="SinPuntos" xml:space="preserve">
    <value>Sin puntos</value>
  </data>
  <data name="Todos" xml:space="preserve">
    <value>Todos</value>
  </data>
  <data name="NuevaVictima" xml:space="preserve">
    <value>Nueva víctima</value>
  </data>
  <data name="Aceptar" xml:space="preserve">
    <value>Aceptar</value>
  </data>
  <data name="Apellido" xml:space="preserve">
    <value>Apellido</value>
  </data>
  <data name="Apodo" xml:space="preserve">
    <value>Apodo</value>
  </data>
  <data name="Caracteristicas" xml:space="preserve">
    <value>Caracteristicas</value>
  </data>
  <data name="Metodos" xml:space="preserve">
    <value>Métodos</value>
  </data>
  <data name="Nombre" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="Ocupacion" xml:space="preserve">
    <value>Ocupación</value>
  </data>
  <data name="Clave" xml:space="preserve">
    <value>Clave</value>
  </data>
  <data name="NuevoAntecedente" xml:space="preserve">
    <value>Nuevo antecedente</value>
  </data>
  <data name="Direcciones" xml:space="preserve">
    <value>Direcciones</value>
  </data>
  <data name="RedesSociales" xml:space="preserve">
    <value>Redes sociales</value>
  </data>
  <data name="Telefonos" xml:space="preserve">
    <value>Teléfonos</value>
  </data>
  <data name="Calle" xml:space="preserve">
    <value>Calle</value>
  </data>
  <data name="Departamento" xml:space="preserve">
    <value>Departamento</value>
  </data>
  <data name="Localidad" xml:space="preserve">
    <value>Localidad</value>
  </data>
  <data name="Numero" xml:space="preserve">
    <value>Número</value>
  </data>
  <data name="Piso" xml:space="preserve">
    <value>Piso</value>
  </data>
  <data name="TipoDireccion" xml:space="preserve">
    <value>Tipo de dirección</value>
  </data>
  <data name="CalleNoValida" xml:space="preserve">
    <value>La calle no es válida.</value>
  </data>
  <data name="DepartamentoNoValido" xml:space="preserve">
    <value>El departamento no es válido.</value>
  </data>
  <data name="NumeroNoValido" xml:space="preserve">
    <value>El número no es válido.</value>
  </data>
  <data name="PisoNoValido" xml:space="preserve">
    <value>El piso no es válido.</value>
  </data>
  <data name="TipoDireccionNoValido" xml:space="preserve">
    <value>El tipo de dirección no es válido.</value>
  </data>
  <data name="TipoRedSocial" xml:space="preserve">
    <value>Tipo red social</value>
  </data>
  <data name="TipoRedSocialNoValido" xml:space="preserve">
    <value>El tipo de red social no es válido.</value>
  </data>
  <data name="TipoTelefono" xml:space="preserve">
    <value>Tipo de teléfono</value>
  </data>
  <data name="TipoTelefonoNoValido" xml:space="preserve">
    <value>El tipo de teléfono no es válido.</value>
  </data>
  <data name="Activo" xml:space="preserve">
    <value>Activo</value>
  </data>
  <data name="Estado" xml:space="preserve">
    <value>Estado</value>
  </data>
  <data name="Inactivo" xml:space="preserve">
    <value>Inactivo</value>
  </data>
  <data name="PorAgresor" xml:space="preserve">
    <value>Por agresor</value>
  </data>
  <data name="PorPerjuicios" xml:space="preserve">
    <value>Por perjuicios</value>
  </data>
  <data name="PorUbicacion" xml:space="preserve">
    <value>Por ubicación</value>
  </data>
  <data name="PorVictima" xml:space="preserve">
    <value>Por víctima</value>
  </data>
  <data name="Agresor" xml:space="preserve">
    <value>Agresor</value>
  </data>
  <data name="Fecha" xml:space="preserve">
    <value>Fecha</value>
  </data>
  <data name="Mapa" xml:space="preserve">
    <value>Mapa</value>
  </data>
  <data name="Observaciones" xml:space="preserve">
    <value>Observaciones</value>
  </data>
  <data name="Perjuicios" xml:space="preserve">
    <value>Perjuicios</value>
  </data>
  <data name="Ubicacion" xml:space="preserve">
    <value>Ubicación</value>
  </data>
  <data name="Victima" xml:space="preserve">
    <value>Víctima</value>
  </data>
  <data name="AplicarCambios" xml:space="preserve">
    <value>Aplicar cambios</value>
  </data>
  <data name="Modificar" xml:space="preserve">
    <value>Modificar</value>
  </data>
  <data name="Eliminar" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="Nuevo" xml:space="preserve">
    <value>Nuevo</value>
  </data>
  <data name="ClaveActual" xml:space="preserve">
    <value>Clave actual</value>
  </data>
  <data name="ClaveNueva" xml:space="preserve">
    <value>Clave nueva</value>
  </data>
  <data name="ConfirmarClave" xml:space="preserve">
    <value>Confirmar clave</value>
  </data>
  <data name="ElegirAgresor" xml:space="preserve">
    <value>Elegir agresor</value>
  </data>
  <data name="ElegirVictima" xml:space="preserve">
    <value>Elegir víctima</value>
  </data>
</root>